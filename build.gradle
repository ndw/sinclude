buildscript {
  repositories {
    mavenLocal()
    mavenCentral()
    maven { url "https://dev.saxonica.com/maven" }
  }

  configurations.all {
    resolutionStrategy {
      force 'xml-apis:xml-apis:1.4.01',
        'net.sf.saxon:Saxon-HE:11.5',
        'org.xmlresolver:xmlresolver:5.1.2'
    }
  }

  dependencies {
    classpath group: 'net.sf.saxon', name: 'Saxon-HE', version: '11.5'
    classpath group: 'org.docbook', name: 'schemas-docbook', version: '5.2CR5'
    classpath group: 'org.docbook', name: 'docbook-xslTNG', version: '2.1.2'
  }
}

plugins {
  id "java"
  id "maven-publish"
  id "signing"
  id 'com.github.gmazzo.buildconfig' version "2.0.2"
  id 'com.nwalsh.gradle.saxon.saxon-gradle' version '0.10.4'
  id 'com.nwalsh.gradle.relaxng.validate' version '0.10.3'
}

import com.nwalsh.gradle.saxon.SaxonXsltTask
import com.nwalsh.gradle.relaxng.validate.RelaxNGValidateTask

sourceCompatibility=1.8
targetCompatibility=1.8

repositories {
  mavenLocal()
  mavenCentral()
}

configurations.all {
  resolutionStrategy {
    force 'xml-apis:xml-apis:1.4.01'
  }
}

configurations {
  transform.extendsFrom documentation
}

dependencies {
  implementation (
    [group: 'net.sf.saxon', name: 'Saxon-HE', version: saxonVersion]
  )
  testImplementation (
    [group: 'junit', name: 'junit', version: '4.13']
  )
  documentation (
    [group: 'net.sf.saxon', name: 'Saxon-HE', version: '11.5'],
    [group: 'org.docbook', name: 'schemas-docbook', version: '5.2CR5'],
    [group: 'org.docbook', name: 'docbook-xslTNG', version: '2.1.1']
    //[group: 'com.nwalsh', name: 'sinclude', version: '5.2.1']
  )
}

buildConfig {
  packageName("com.nwalsh")
  buildConfigField('String', 'TITLE', "\"${sincludeTitle}\"")
  buildConfigField('String', 'VERSION', "\"${sincludeVersion}\"")
  // The SAXON_VERSION isn't really relevant anymore, but removing it
  // now could break code using the API so we'll leave it...
  buildConfigField('String', 'SAXON_VERSION', "\"${saxonVersion}\"")
}

test {
    testLogging.showStandardStreams = true
}

jar {
  archiveBaseName = "sinclude-${sincludeVersion}"
  manifest {
    attributes "Built-By": "Norman Walsh"
    attributes "Implementation-Vendor": "Norman Walsh"
    attributes "Implementation-Title": "Saxon XInclude Processor"
    attributes "Implementation-Version": sincludeVersion
  }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
  archiveClassifier = 'javadoc'
  from javadoc.destinationDir
}

task sourcesJar(type: Jar, dependsOn: ["generateBuildConfig"]) {
  archiveClassifier = 'sources'
  from sourceSets.main.allSource
}

task distCopyJar(type: Copy, dependsOn: ['jar']) {
  from "${buildDir}/libs/${basename}-${sincludeVersion}.jar"
  into "${buildDir}/${basename}-${sincludeVersion}/lib"
  doFirst {
    mkdir "${buildDir}/${basename}-${sincludeVersion}/lib"
  }
}

task distCopyReadme(type: Copy) {
  from "README.org"
  into "${buildDir}/${basename}-${sincludeVersion}"
  doFirst {
    mkdir "${buildDir}/${basename}-${sincludeVersion}"
  }
}

task zipDist(type: Zip,
             dependsOn: ['distCopyReadme', 'distCopyJar']) {
  from("${buildDir}/${basename}-${sincludeVersion}")
  into "${basename}-${sincludeVersion}"
  archiveFileName = "${basename}-${sincludeVersion}.zip"
  doFirst {
    mkdir "${buildDir}/distributions"
  }
}

task dist(dependsOn: ['test', 'zipDist']) {
  doLast {
    println("Built dist for ${basename} version ${sincludeVersion}")
  }
}

signing {
  sign publishing.publications
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      pom {
        name = 'Saxon XInclude'
        packaging = 'jar'
        description = 'An XInclude processor for Saxon'
        url = 'https://github.com/ndw/sinclude'

        scm {
          url = 'scm:git@github.com:ndw/sinclude.git'
          connection = 'scm:git@github.com:ndw/sinclude.git'
          developerConnection = 'scm:git@github.com:ndw/sinclude.git'
        }

        licenses {
          license {
            name = 'Apache License version 2.0'
            url = 'https://www.apache.org/licenses/LICENSE-2.0'
            distribution = 'repo'
          }
        }

        developers {
          developer {
            id = 'ndw'
            name = 'Norman Walsh'
          }
        }
      }

      groupId = "com.nwalsh"
      artifactId = "sinclude"
      version = sincludeVersion
      from components.java
      artifact javadocJar
      artifact sourcesJar
    }
  }

  repositories {
    maven {
      url = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
      credentials {
        username = findProperty("sonatypeUsername") ?: ""
        password = findProperty("sonatypePassword") ?: ""
      }
    }
  }
}

// ============================================================

task copyJarResources() {
  outputs.files fileTree(dir: "${buildDir}/website")

  def dbjar = null
  configurations.transform.each { path ->
    if (path.toString().contains("docbook-xslTNG")) {
      dbjar = path
    }
  }

  doLast {
    if (dbjar == null) {
      throw new GradleException("Failed to locate DocBook xslTNG jar file")
    }
    copy {
      into "${buildDir}/website"
      from ({ zipTree(dbjar.toString()) }) {
        include "org/docbook/xsltng/resources/**"
      }
      eachFile { fileCopyDetails ->
        def originalPath = fileCopyDetails.path
        fileCopyDetails.path = originalPath.replace('org/docbook/xsltng/resources/', '')
      }
    }
  }

  doLast {
    delete "${buildDir}/website/org"
  }
}

task copyStaticResources() {
  inputs.files fileTree(dir: "${projectDir}/src/website/resources")
  inputs.files fileTree(dir: "${projectDir}/website/resources")
  inputs.files fileTree(dir: "${projectDir}/src/website/xml")
  outputs.files fileTree(dir: "${buildDir}/website")
  outputs.files fileTree(dir: "${buildDir}/aug")

  doLast {
    copy {
      into "${buildDir}/website"
      from "${projectDir}/src/website/resources"
    }
  }

  doLast {
    copy {
      into "${buildDir}/website"
      from "${projectDir}/website/resources"
    }
  }

  doLast {
    copy {
      from "${projectDir}/src/website/xml/images"
      into "${buildDir}/website/images"
    }
  }

  // FIXME: Grotesque hack. 
  doLast {
    copy {
      from "${projectDir}/src/website/xml/images"
      into "${buildDir}/aug/images"
    }
  }

  // FIXME: Grotesque hack. 
  doLast {
    copy {
      from "${projectDir}/src/website/resources/images"
      into "${buildDir}/aug/images"
    }
  }

  doLast {
    copy {
      from "${projectDir}/src/website/xml/examples"
      into "${buildDir}/website/examples"
    }
  }
}

task copyResources() {
  dependsOn copyJarResources
  dependsOn copyStaticResources
}

task website(type: SaxonXsltTask, dependsOn: ["copyResources"]) {
  inputs.files fileTree(dir: "${projectDir}/src/website/xml")
  outputs.files fileTree(dir: "${buildDir}/website", include: "*.html")

  //input website_augment.outputs.files.singleFile
  input "${projectDir}/src/website/xml/sinclude.xml"
  output "${buildDir}/website/index.html"
  stylesheet "${projectDir}/src/website/xsl/docbook.xsl"
  args(['-init:org.docbook.xsltng.extensions.Register'])
  parameters (
    'mediaobject-input-base-uri': "file:${buildDir}/xml/",
    'mediaobject-output-base-uri': "/",
    'chunk': 'index.html',
    'chunk-output-base-uri': "${buildDir}/website/",
    'docbook-transclusion': 'true',
    'sinclude-version': sincludeVersion
  )
}

// ============================================================

task helloWorld() {
  doLast {
    println('Hello, world.')
  }
}
