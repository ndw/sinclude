<chapter xmlns="http://docbook.org/ns/docbook"
         xmlns:xi='http://www.w3.org/2001/XInclude'
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:trans="http://docbook.org/ns/transclusion"
         xml:id="xml-inclusions"
         trans:idfixup="auto"
         version="5.2">
<title>XML inclusions</title>

<para>The general form of an XML inclusion is:</para>

<programlisting language="xml"><![CDATA[<xi:include xmlns:xi='http://www.w3.org/2001/XInclude'
            href='/path/to/document.xml'
            parse='xml'
            fragid='xpointer(…)'/>]]></programlisting>

<para>The <tag class="attribute">parse</tag> attribute is optional in
this case. The fragment identifier is also optional; if it’s not
present, the entire document is included. The attribute <tag class="attribute">xpointer</tag>
can be used instead of <tag class="attribute">fragid</tag>.</para>

<para>For the purposes of the examples that follow, let’s imagine a small XML document,
<filename>abstraction.xml</filename>,
one that I could include in its entirety with XInclude:</para>

<programlisting language="xml"
><xi:include href="abstraction.xml" parse="text"/>
</programlisting>

<para>Like so:</para>

<formalgroup>
<title>XML inclusion without a fragment identifier</title>
<example>
<title>The XInclude</title>
<programlisting language="xml"><![CDATA[<xi:include href="abstraction.xml"/>]]></programlisting>
</example>
<example>
<title>What’s included</title>
<xi:include href="abstraction.xml"/>
</example>
</formalgroup>

<section xml:id="xml-fragids">
<title>XML fragment identifier schemes</title>
<para>The XML fragment identifier schemes are spelled out in the 
<link xlink:href="https://www.w3.org/TR/2003/REC-xptr-framework-20030325/">XPointer
Framework</link>.</para>

<para>SInclude supports:</para>
<variablelist>
<varlistentry><term><literal>id(some-id)</literal> and its shorthand syntax</term>
<listitem>
<para>The <literal>id</literal> scheme identifies an XML element by its ID. The
shorthand syntax for this common case is simply the value of the ID, <code>some-id</code>.
</para>

<formalgroup>
<title>XML inclusion with fragment identifier</title>
<example>
<title>The XInclude</title>
<programlisting language="xml"
><xi:include href="xml-inclusions.xml" parse="text" fragid="search=/fragid=&quot;abs/,#/example#;before"
/></programlisting>
</example>
<example>
<title>What’s included</title>
<xi:include href="abstraction.xml" fragid="abs"/>
</example>
</formalgroup>


</listitem>
</varlistentry>
<varlistentry><term><literal>element(some-id/1/3)</literal></term>
<listitem>
<para>The <literal xlink:href="https://www.w3.org/TR/xptr-element/">element</literal>
scheme identifies an XML element with an optional ID followed by a
child sequence. The child sequence is <emphasis>just</emphasis> the
numbers of the children (i.e., the third child of the first child is
<code>/1/3</code>).
</para>

<formalgroup>
<title>XML inclusion with fragment identifier and child sequence</title>
<example>
<title>The XInclude</title>
<programlisting language="xml"
><xi:include href="xml-inclusions.xml" parse="text" fragid="search=#fragid=&quot;abs/#,#/example#;before"
/></programlisting>
</example>
<example>
<title>What’s included</title>
<xi:include href="abstraction.xml" fragid="abs/2"/>
</example>
</formalgroup>
</listitem>
</varlistentry>
<varlistentry><term><literal>xmlns(binding)</literal></term>
<listitem>
<para>The <literal xlink:href="https://www.w3.org/TR/xptr-xmlns/">xmlns</literal>
scheme doesn’t identify anything directly, but it provides a namespace
binding for the XPointer parts that follow it, as shown in the <literal>xpath</literal>
example below.
</para>
</listitem>
</varlistentry>
<varlistentry><term><literal>xpath(expression)</literal></term>
<listitem>
<para>The <literal>xpath</literal> scheme identifies content with
XPath. The SInclude implementation makes no attempt to limit the
expressions to XPath 1 or 2 or any other version. It simply asks Saxon
to evaluate the expression.
</para>

<formalgroup>
<title>XML inclusion with fragment identifier and child sequence</title>
<example>
<title>The XInclude</title>
<programlisting language="xml"
><xi:include href="xml-inclusions.xml" parse="text"
   fragid="search=#for&#x20;the following expression#,#/example#;before"
/></programlisting>
</example>
<example>
<title>What’s included</title>
<!-- Use xmlns() to set the namespace binding for the following expression -->
<xi:include href="abstraction.xml"
            fragid="xmlns(db=http://docbook.org/ns/docbook)
                    xpath(/db:blockquote/db:attribution/db:personname)"/>
</example>
</formalgroup>


</listitem>
</varlistentry>
</variablelist>
</section>

</chapter>
